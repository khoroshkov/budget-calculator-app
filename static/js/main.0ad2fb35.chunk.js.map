{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleDeleteExpense","handleEditExpense","id","charge","amount","className","key","aria-label","onClick","ExpenseList","expenses","clearAllExpenses","map","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","setItem","stringify","totalExpenses","reduce","acc","current","parseInt","handleAlert","setTimeout","e","target","preventDefault","newExpenses","item","newExpense","uuidv4","deletedItem","find","tempExpenses","filter","editedExpense","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ad2fb35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MdEdit, MdDelete } from \"react-icons/md\";\r\n\r\nexport const ExpenseItem = ({\r\n  expense,\r\n  handleDeleteExpense,\r\n  handleEditExpense,\r\n}) => {\r\n  const { id, charge, amount } = expense;\r\n\r\n  return (\r\n    <li className=\"item\" key={id}>\r\n      <div className=\"info\">\r\n        <span className=\"expense\">{charge}</span>\r\n        <span className=\"amount\">-{amount} грн.</span>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"edit-btn\"\r\n          aria-label=\"edit button\"\r\n          onClick={() => handleEditExpense(id)}\r\n        >\r\n          <MdEdit />\r\n        </button>\r\n        <button\r\n          className=\"clear-btn\"\r\n          aria-label=\"delete button\"\r\n          onClick={() => handleDeleteExpense(id)}\r\n        >\r\n          <MdDelete />\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ExpenseItem } from \"./ExpenseItem\";\r\nimport { MdDelete } from \"react-icons/md\";\r\n\r\nexport const ExpenseList = ({\r\n  expenses,\r\n  clearAllExpenses,\r\n  handleDeleteExpense,\r\n  handleEditExpense,\r\n}) => {\r\n  return (\r\n    <>\r\n      <ul className=\"list\">\r\n        {expenses.map((expense) => {\r\n          return (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              expense={expense}\r\n              handleEditExpense={handleEditExpense}\r\n              handleDeleteExpense={handleDeleteExpense}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n      {expenses.length > 0 && (\r\n        <button className=\"btn\" onClick={clearAllExpenses}>\r\n          {\" \"}\r\n          Очистить расходы <MdDelete className=\"btn-icon\" />\r\n        </button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { MdSend } from \"react-icons/md\";\r\n\r\nexport const ExpenseForm = ({\r\n  charge,\r\n  amount,\r\n  handleCharge,\r\n  handleAmount,\r\n  handleSubmit,\r\n  edit,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-center\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"charge\">Статья расходов</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"charge\"\r\n            name=\"charge\"\r\n            placeholder=\"например, оплата коммунальных услуг\"\r\n            value={charge}\r\n            onChange={handleCharge}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"amount\">Сумма</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            id=\"amount\"\r\n            name=\"amount\"\r\n            placeholder=\"например, 100 грн\"\r\n            value={amount}\r\n            onChange={handleAmount}\r\n          />\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn\">\r\n        {edit ? \"Редактировать\" : \"Записать\"}\r\n        <MdSend className=\"btn-icon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Alert = ({ type, text }) => {\r\n  return <div className={`alert alert-${type}`}>{text}</div>;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ExpenseList } from \"./components/ExpenseList\";\nimport { ExpenseForm } from \"./components/ExpenseForm\";\nimport { Alert } from \"./components/Alert\";\n\nimport \"./App.css\";\n\nconst initialExpenses = localStorage.getItem(\"expenses\")\n  ? JSON.parse(localStorage.getItem(\"expenses\"))\n  : [];\n\nfunction App() {\n  const [expenses, setExpenses] = useState(initialExpenses);\n  const [charge, setCharge] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [alert, setAlert] = useState({ show: false });\n  const [edit, setEdit] = useState(false);\n  const [id, setId] = useState(0);\n\n  useEffect(() => {\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  }, [expenses]);\n\n  const totalExpenses = expenses.reduce((acc, current) => {\n    return (acc += parseInt(current.amount));\n  }, 0);\n\n  const handleCharge = (e) => {\n    setCharge(e.target.value);\n  };\n\n  const handleAmount = (e) => {\n    setAmount(e.target.value);\n  };\n\n  const handleAlert = ({ type, text }) => {\n    setAlert({ show: true, type, text });\n\n    setTimeout(() => {\n      setAlert({ show: false });\n    }, 3000);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (charge !== \"\" && amount > 0) {\n      if (edit) {\n        let newExpenses = expenses.map((item) => {\n          return item.id === id ? { ...item, charge, amount } : item;\n        });\n        setExpenses(newExpenses);\n        setEdit(false);\n\n        handleAlert({\n          type: \"success\",\n          text: `Редактирование расходов успешно сохранено`,\n        });\n      } else {\n        const newExpense = {\n          id: uuidv4(),\n          charge,\n          amount,\n        };\n        setExpenses([...expenses, newExpense]);\n        handleAlert({\n          type: \"success\",\n          text: \"Ваши расходы успешно добавлены\",\n        });\n      }\n\n      setCharge(\"\");\n      setAmount(\"\");\n    } else {\n      handleAlert({\n        type: \"danger\",\n        text: \"Вы не ввели данные о Ваших расходах\",\n      });\n    }\n  };\n\n  const clearAllExpenses = () => {\n    setExpenses([]);\n    handleAlert({\n      type: \"danger\",\n      text: \"Ваши расходы успешно удалены\",\n    });\n  };\n\n  const handleDeleteExpense = (id) => {\n    let deletedItem = expenses.find((item) => (item.id = id));\n    let tempExpenses = expenses.filter((item) => item.id !== id);\n\n    setExpenses(tempExpenses);\n    handleAlert({\n      type: \"danger\",\n      text: `Статья расходов \"${deletedItem.charge}\" \n      с суммой \"-${deletedItem.amount} грн.\" успешно удалена`,\n    });\n  };\n\n  const handleEditExpense = (id) => {\n    let editedExpense = expenses.find((item) => item.id === id);\n    let { charge, amount } = editedExpense;\n\n    setCharge(charge);\n    setAmount(amount);\n    setEdit(true);\n    setId(id);\n  };\n\n  return (\n    <>\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <h1>Калькулятор твоего бюджета</h1>\n      <main className=\"App\">\n        <ExpenseForm\n          charge={charge}\n          amount={amount}\n          handleCharge={handleCharge}\n          handleAmount={handleAmount}\n          handleSubmit={handleSubmit}\n          edit={edit}\n        />\n        <ExpenseList\n          expenses={expenses}\n          handleDeleteExpense={handleDeleteExpense}\n          handleEditExpense={handleEditExpense}\n          clearAllExpenses={clearAllExpenses}\n        />\n      </main>\n      <h1 className=\"totalTitle\">\n        Общая сумма расходов:{\" \"}\n        <span className=\"total\">{totalExpenses} грн.</span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}